// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - Living Edge Lab
//
// SPDX-License-Identifier: GPL-2.0-only

/**
 * Messages/calls related to the data plane component of SteelEagle.
 *
 * The data plane is responsible for relaying telemetry and frame data
 * from the drone to the rest of the system, and relaying the computed result
 * from compute modules to the rest of the system.
 */

syntax = "proto3";
option py_generic_services = true;
package protocol.dataplane;
import "common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Request {
  uint64 seq_num = 1;  // For correlation
  google.protobuf.Timestamp timestamp = 2; // Time the request was made
  oneof type {
    TelemetryRequest tel = 3;
    FrameRequest frame  = 4;
    GetComputeResult cpt = 5;
    UpdateCurrentTask task = 6;
  }
}

message Response {
  uint64 seq_num = 1; // For correlation
  google.protobuf.Timestamp timestamp = 2;// Time the response was sent
  protocol.common.ResponseStatus resp = 3;
  oneof type {
    Telemetry tel = 4;
    Frame frame = 5;
    ComputeResponse cpt = 6;
  }
}

/*
* TELEMETRY
*/
message TelemetryRequest {
}
message Telemetry {
  // The drone that this telemetry corresponds to
  string drone_name = 1;
  protocol.common.Location global_position = 2;
  protocol.common.PositionENU relative_position = 3;
  protocol.common.VelocityENU velocity_enu = 4;
  protocol.common.VelocityBody velocity_body = 5;
  protocol.common.PoseBody gimbal_pose = 6;
  protocol.common.Location home = 7; // GPS location that will be used when returning home
  protocol.common.Cameras cameras = 8; // Information about the drone's camera sensors
  protocol.common.Alerts alerts = 9; // Enumeration of vehicle warnings
  uint32 battery = 10;  // Battery level [0-100]%
  uint32 satellites = 11; // Number of satellites used in GPS fix
  google.protobuf.Duration uptime = 12;
  string drone_model = 13; // Manufacturer/model of the drone
  protocol.common.FlightStatus status = 14; // Details on current drone action i.e. 'HOVER', 'LANDING'
  string current_task = 15; // Details on the current autonomous task i.e. 'idle', 'patrolling', 'tracking'
}

/*
* FRAME
*/
message FrameRequest {}
message Frame {
  bytes data = 1; // Raw bytes
  uint64 width = 2;
  uint64 height = 3;
  uint64 channels = 4; // RGB, greyscale, etc
  uint64 id = 5; // For future correlation
}

/*
* COMPUTE
*/
message GetComputeResult {
  string type = 1;
}

message UpdateCurrentTask {
    string task_name = 1;
}

message ComputeResponse {
  string type = 1;
  uint64 frame_id = 2; // For correlation
  repeated ComputeResult result = 3;
}

message ComputeResult {
  oneof type{
    DetectionResult detection_result = 1;
    AvoidanceResult avoidance_result = 2;
    string generic_result = 3;
  }
}

message Detection {
  uint64 detection_id = 1; // Can be multiple objects per frame
  string class_name = 2;
  double score = 3;
  protocol.common.BoundingBox bbox = 4;
  bool hsv_filter_passed = 5;
}

message DetectionResult {
  repeated Detection detections = 1;
}

message AvoidanceResult {
  double actuation_vector = 1;
}
